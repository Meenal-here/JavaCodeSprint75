//leetcode problem 1
//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
//link- https://leetcode.com/problems/two-sum/description/
//Day-1 #JavaCodeSprint75 Challenge
//Time Complexity: O(n) as we are using a single loop and hashmap
class TwoSum_UsingHashMap {
    public int[] twoSum(int[] nums, int target){
      int n = nums.length;
      HashMap<Integer,Integer> map = new HashMap<>(); 
      for (int i = 0; i <n; i++) { //iterating through hashmap
            if (map.containsKey(target - nums[i])) { //(value-x=y  fix x)
                return new int[] { i, map.get(target - nums[i]) };//if the map contains the key return the array
            }
            map.put(nums[i], i);    //if not it means element is not in the map : add the element
        }
    
      return new int[]{}; //if no answer found
    }
}